#!/bin/bash

#
# This script runs tests of all of Cake's flow isolation parameters
# (flowblind, hosts, srchost, dsthost, flows, dual-srchost, dual-dsthost,
# and triple-isolate).
#
# Simply run it without arguments as root. Trust me! :)
#
# srchost/dsthost stopped working due to a bug introduced in kernel 5.8,
# (https://github.com/torvalds/linux/commit/b0c19ed6088ab41dd2a727b60594b7297c15d6ce)
# so this demonstrates that bug, and confirms that the patch that was made for
# it works. In the future, we can re-run this test any time changes are made
# that may affect Cake's flow isolation.
#

DURATION=10
IPERF3_PORTS=(5101 5102 5103 5104)

ipx() {
	local ns="$1"
	shift
	ip netns exec $ns $*
}

# setup sets up the netns environment
setup() {
	# set up server
	ip netns add srv
	ipx srv sysctl -qw net.ipv6.conf.all.disable_ipv6=1
	ipx srv ip link add dev srv.l type veth peer name rtr.r
	ipx srv ip addr add 10.7.1.1/24 dev srv.l
	ipx srv ip addr add 10.7.1.2/24 dev srv.l
	ipx srv ip addr add 10.7.1.3/24 dev srv.l
	ipx srv ip link set srv.l up

	# set up router
	ip netns add rtr
	ipx rtr sysctl -qw net.ipv6.conf.all.disable_ipv6=1
	ipx rtr sysctl -qw net.ipv4.ip_forward=1
	ipx srv ip link set dev rtr.r netns rtr
	ipx rtr ip addr add 10.7.1.254/24 dev rtr.r
	ipx rtr ip link set rtr.r up
	ipx rtr ip link add dev rtr.l type veth peer name cli.r
	ipx rtr ip addr add 10.7.0.254/24 dev rtr.l
	ipx rtr ip link set rtr.l up

	# set up bridge
	#ip netns add rtr
	#ipx rtr sysctl -qw net.ipv6.conf.all.disable_ipv6=1
	#ipx rtr sysctl -qw net.ipv4.ip_forward=1
	#ipx srv ip link set dev rtr.r netns rtr
	#ipx rtr ip link set rtr.r up
	#ipx rtr ip link add dev rtr.l type veth peer name cli.r
	#ipx rtr ip link set rtr.l up
	#ipx rtr ip link add name rtr.b type bridge
	#ipx rtr ip link set rtr.b up
	#ipx rtr ip link set rtr.r master rtr.b
	#ipx rtr ip link set rtr.l master rtr.b

	# set up client
	ip netns add cli
	ipx cli sysctl -qw net.ipv6.conf.all.disable_ipv6=1
	ipx rtr ip link set dev cli.r netns cli
	ipx cli ip addr add 10.7.0.1/24 dev cli.r
	ipx cli ip addr add 10.7.0.2/24 dev cli.r
	ipx cli ip addr add 10.7.0.3/24 dev cli.r
	ipx cli ip link set cli.r up

	# routing
	ipx srv ip route add default via 10.7.1.254
	ipx cli ip route add default via 10.7.0.254
}

# setup_fq_codel adds fq_codel and a hash filter with the specified keys
setup_fq_codel() {
	local keys="$1"

	local iface
	for iface in rtr.r; do
		ipx rtr tc qdisc del dev $iface root &>/dev/null
		ipx rtr tc qdisc add dev $iface root handle 1: htb default fffe
		ipx rtr tc class add dev $iface parent 1: classid 1:fffe \
			htb rate 50Mbit ceil 50Mbit || error
		ipx rtr tc qdisc add dev $iface parent 1:fffe handle fffe: \
			fq_codel flows 65536 || error
		if [[ $keys != "" ]]; then
			ipx rtr tc filter add dev $iface protocol all parent fffe: handle 1 \
				flow hash keys $keys divisor 65536 || error
		fi
		ipx rtr tc qdisc show dev $iface
		ipx rtr tc filter show dev $iface parent fffe:
	done
}

# setup_cake adds cake with the specified args
setup_cake() {
	local cake_args="$1"

	local iface
	for iface in rtr.r; do
		ipx rtr tc qdisc del dev $iface root &>/dev/null
		ipx rtr tc qdisc add dev $iface root cake bandwidth 50Mbit $cake_args || error
		ipx rtr tc qdisc show dev $iface
	done
}

# run_iperf3 runs iperf3 with a list of args for each instance
run_iperf3() {
	(
		local a
		local n=0
		for a in "$@"; do
			echo iperf3 "$a"
			ipx cli iperf3 -i 0 -t $DURATION $a > /tmp/chf_iperf_$n.txt &
			((n++))
		done
		wait
		local x=0
		for ((x=0; x<n; x++)); do
			echo
			cat /tmp/chf_iperf_$x.txt
		done
	)
}

# run_src runs test with two source hosts
run_src() {
	run_iperf3 \
		"-P 1 -C cubic -B 10.7.0.1 -c 10.7.1.1 -p ${IPERF3_PORTS[0]}" \
		"-P 2 -C reno -B 10.7.0.2 -c 10.7.1.1 -p ${IPERF3_PORTS[1]}"
}

# run_dst runs test with two destination hosts
run_dst() {
	run_iperf3 \
		"-P 1 -C cubic -B 10.7.0.1 -c 10.7.1.1 -p ${IPERF3_PORTS[0]}" \
		"-P 2 -C reno -B 10.7.0.1 -c 10.7.1.2 -p ${IPERF3_PORTS[1]}"
}

# uline echoes a string then underlines it
uline() {
	echo "$1"
	echo -e "${1//?/${2:--}}"
	echo
}

# run runs the test
run() {
	local p
	local pids=()

	# output kernel and tc version
	echo "uname -a: $(uname -a)"
	echo "tc -V: $(tc -V)"

	# servers
	for p in ${IPERF3_PORTS[@]}; do
		ipx srv iperf3 -p $p -s -D
	done
	sleep 0.5

	# pcaps
	#ip netns exec rtr tcpdump -i rtr.r -n -s 128 -w rtr.r.pcap &
	#pids+=($!)

	# run source and destination tests for everything but triple-isolate
	local x y
	for x in src dst; do
		echo
		uline "fq_codel flow hash keys $x (two $x IPs)"
		setup_fq_codel $x
		run_$x

		echo
		uline "cake flowblind (two $x IPs)"
		setup_cake "flowblind"
		run_$x

		echo
		uline "cake flows (two $x IPs)"
		setup_cake "flows"
		run_$x

		echo
		uline "cake hosts (two $x IPs)"
		setup_cake "hosts"
		run_$x

		for y in src dst; do
			echo
			uline "cake ${y}host (two $x IPs)"
			setup_cake "${y}host"
			run_$x

			echo
			uline "cake dual-${y}host (two $x IPs)"
			setup_cake "dual-${y}host"
			run_$x
		done
	done

	# run triple-isolate test
	echo
	uline "cake triple-isolate (three src IPs, two dst IPs)"
	setup_cake "triple-isolate"
	run_iperf3 \
		"-P 2 -C cubic -B 10.7.0.1 -c 10.7.1.1 -p ${IPERF3_PORTS[0]}" \
		"-P 2 -C reno -B 10.7.0.1 -c 10.7.1.2 -p ${IPERF3_PORTS[1]}" \
		"-P 2 -C cubic -B 10.7.0.2 -c 10.7.1.1 -p ${IPERF3_PORTS[2]}" \
		"-P 2 -C reno -B 10.7.0.3 -c 10.7.1.2 -p ${IPERF3_PORTS[3]}"

	#for p in ${pids[@]}; do
	#	kill -SIGINT $p
	#done
	#wait
}

error() {
	>&2 echo "failed"
	exit 1
}

# teardown cleans up
teardown() {
	(
		local p
		set +e
		for p in ${IPERF3_PORTS[@]}; do
			pkill -f "iperf3 -p $p -s -D"
		done
		for n in srv rtr cli; do
			ip netns del $n
		done
	) &> /dev/null
}

# main
trap teardown EXIT

setup
run
teardown
